{"ast":null,"code":"import _slicedToArray from \"/Users/lee/PycharmProjects/learning-react/08/hooks-tutorial/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/lee/PycharmProjects/learning-react/08/hooks-tutorial/src/Average.js\";\nimport React, { useState, useMemo, useRef, useCallback } from 'react';\n\nvar getAverage = function getAverage(numbers) {\n  console.log('평균값 계산중..');\n  if (numbers.length === 0) return 0;\n  var sum = numbers.reduce(function (a, b) {\n    return a + b;\n  });\n  return sum / numbers.length;\n};\n\nvar Average = function Average() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      list = _useState2[0],\n      setList = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      number = _useState4[0],\n      setNumber = _useState4[1];\n\n  var inputEl = useRef(null);\n  var onChange = useCallback(function (e) {\n    setNumber(e.target.value);\n  }, []); // 컴포넌트가 처음 렌더링 될 때만 함수 생성\n\n  var onInsert = useCallback(function () {\n    var nextList = list.concat(parseInt(number));\n    setList(nextList);\n    setNumber('');\n    inputEl.current.focus();\n  }, [number, list]); // number 혹은 list 가 바뀌었을 때만 함수 생성\n\n  var avg = useMemo(function () {\n    return getAverage(list);\n  }, [list]);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    value: number,\n    onChange: onChange,\n    ref: inputEl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: onInsert,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, \"\\uB4F1\\uB85D\"), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, list.map(function (value, index) {\n    return React.createElement(\"li\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, value);\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"\\uD3C9\\uADE0\\uAC12:\"), \" \", avg));\n};\n\nexport default Average;","map":{"version":3,"sources":["/Users/lee/PycharmProjects/learning-react/08/hooks-tutorial/src/Average.js"],"names":["React","useState","useMemo","useRef","useCallback","getAverage","numbers","console","log","length","sum","reduce","a","b","Average","list","setList","number","setNumber","inputEl","onChange","e","target","value","onInsert","nextList","concat","parseInt","current","focus","avg","map","index"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,OAA1B,EAAmCC,MAAnC,EAA2CC,WAA3C,QAA8D,OAA9D;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAAC,OAAO,EAAI;AAC5BC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,MAAIF,OAAO,CAACG,MAAR,KAAmB,CAAvB,EAA0B,OAAO,CAAP;AAC1B,MAAMC,GAAG,GAAGJ,OAAO,CAACK,MAAR,CAAe,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUD,CAAC,GAAGC,CAAd;AAAA,GAAf,CAAZ;AACA,SAAOH,GAAG,GAAGJ,OAAO,CAACG,MAArB;AACD,CALD;;AAOA,IAAMK,OAAO,GAAG,SAAVA,OAAU,GAAM;AAAA,kBACIb,QAAQ,CAAC,EAAD,CADZ;AAAA;AAAA,MACbc,IADa;AAAA,MACPC,OADO;;AAAA,mBAEQf,QAAQ,CAAC,EAAD,CAFhB;AAAA;AAAA,MAEbgB,MAFa;AAAA,MAELC,SAFK;;AAGpB,MAAMC,OAAO,GAAGhB,MAAM,CAAC,IAAD,CAAtB;AAEA,MAAMiB,QAAQ,GAAGhB,WAAW,CAAC,UAAAiB,CAAC,EAAI;AAChCH,IAAAA,SAAS,CAACG,CAAC,CAACC,MAAF,CAASC,KAAV,CAAT;AACD,GAF2B,EAEzB,EAFyB,CAA5B,CALoB,CAOZ;;AACR,MAAMC,QAAQ,GAAGpB,WAAW,CAAC,YAAM;AACjC,QAAMqB,QAAQ,GAAGV,IAAI,CAACW,MAAL,CAAYC,QAAQ,CAACV,MAAD,CAApB,CAAjB;AACAD,IAAAA,OAAO,CAACS,QAAD,CAAP;AACAP,IAAAA,SAAS,CAAC,EAAD,CAAT;AACAC,IAAAA,OAAO,CAACS,OAAR,CAAgBC,KAAhB;AACD,GAL2B,EAKzB,CAACZ,MAAD,EAASF,IAAT,CALyB,CAA5B,CARoB,CAaA;;AAEpB,MAAMe,GAAG,GAAG5B,OAAO,CAAC;AAAA,WAAMG,UAAU,CAACU,IAAD,CAAhB;AAAA,GAAD,EAAyB,CAACA,IAAD,CAAzB,CAAnB;AAEA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,KAAK,EAAEE,MAAd;AAAsB,IAAA,QAAQ,EAAEG,QAAhC;AAA0C,IAAA,GAAG,EAAED,OAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAQ,IAAA,OAAO,EAAEK,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGT,IAAI,CAACgB,GAAL,CAAS,UAACR,KAAD,EAAQS,KAAR;AAAA,WACR;AAAI,MAAA,GAAG,EAAEA,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiBT,KAAjB,CADQ;AAAA,GAAT,CADH,CAHF,EAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,OACeO,GADf,CARF,CADF;AAcD,CA/BD;;AAiCA,eAAehB,OAAf","sourcesContent":["import React, { useState, useMemo, useRef, useCallback } from 'react';\n\nconst getAverage = numbers => {\n  console.log('평균값 계산중..');\n  if (numbers.length === 0) return 0;\n  const sum = numbers.reduce((a, b) => a + b);\n  return sum / numbers.length;\n};\n\nconst Average = () => {\n  const [list, setList] = useState([]);\n  const [number, setNumber] = useState('');\n  const inputEl = useRef(null);\n\n  const onChange = useCallback(e => {\n    setNumber(e.target.value);\n  }, []); // 컴포넌트가 처음 렌더링 될 때만 함수 생성\n  const onInsert = useCallback(() => {\n    const nextList = list.concat(parseInt(number));\n    setList(nextList);\n    setNumber('');\n    inputEl.current.focus();\n  }, [number, list]); // number 혹은 list 가 바뀌었을 때만 함수 생성\n\n  const avg = useMemo(() => getAverage(list), [list]);\n\n  return (\n    <div>\n      <input value={number} onChange={onChange} ref={inputEl} />\n      <button onClick={onInsert}>등록</button>\n      <ul>\n        {list.map((value, index) => (\n          <li key={index}>{value}</li>\n        ))}\n      </ul>\n      <div>\n        <b>평균값:</b> {avg}\n      </div>\n    </div>\n  );\n};\n\nexport default Average;\n"]},"metadata":{},"sourceType":"module"}